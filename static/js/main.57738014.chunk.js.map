{"version":3,"sources":["logo.svg","Components/Card/card.component.jsx","Components/card-list/card-list.component.jsx","Components/SearchBox/searchbox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","Monster","id","name","email","CardList","monsters","map","monster","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","string","fetch","then","response","json","users","this","filtredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,oLCE9BC,G,wBAAK,SAAAC,GACd,OAAO,yBAAKC,UAAU,kBAClB,yBAAKC,IAAI,UAAUC,IAAK,wBAAwBH,EAAMI,QAAQC,GAAG,2BACjE,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCFbC,EAAS,SAAAR,GACtB,OAAO,yBAAKC,UAAU,aACbD,EAAMS,SAASC,KAAI,SAAAC,GAAO,OACvB,kBAAC,EAAD,CAAMC,IAAKD,EAAQN,GAAID,QAASO,SCJ/BE,G,MAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACnB,2BAAOC,KAAK,SAASf,UAAU,SAC9Ba,YAAaA,EACbG,SAAUF,MCiCAG,E,kDA9Bb,aAAc,IAAD,8BACX,gBAYJH,aAAa,SAAAI,GACX,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZnC,EAAKC,MAAO,CACVC,OAAQ,aACRhB,SAAS,GACTY,YAAY,IALH,E,gEAQK,IAAD,OACjBK,MAAM,8CACNC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACvBF,MAAK,SAAAG,GAAK,OAAE,EAAKV,SAAS,CAACX,SAASqB,S,+BAK3B,IAAD,EACqBC,KAAKP,MAA3Bf,EADC,EACDA,SAASY,EADR,EACQA,YACTW,EAAgBvB,EAASwB,QAAO,SAAAxB,GAAQ,OAAEA,EAASH,KAAK4B,cAAcC,SAASd,EAAYa,kBAEjG,OACE,yBAAKjC,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWa,YAAY,kBAAkBC,aAAcgB,KAAKhB,eAC5D,kBAAC,EAAD,CAAUN,SAAUuB,S,GA1BVI,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.57738014.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport '../Card/card.styles.css';\r\nexport const Card=props=>{\r\n    return <div className='card-container'>\r\n        <img alt=\"monster\" src={'https://robohash.org/'+props.Monster.id+'?set=set2&size=180x180'}/>\r\n        <h3>{props.Monster.name}</h3>\r\n        <p>{props.Monster.email}</p>\r\n    </div>\r\n}","import React from 'react';\r\nimport './card-list.style.css'\r\nimport '../Card/card.component'\r\nimport { Card } from '../Card/card.component';\r\nexport const CardList=props=>{\r\nreturn <div className='card-list'>\r\n        {props.monsters.map(monster=>(\r\n            <Card key={monster.id} Monster={monster}/>\r\n        ))}\r\n    </div>\r\n}\r\n  ","import React from 'react';\r\nimport './searchbox.styles.css'\r\n\r\nexport const SearchBox=({placeholder,handleChange})=>(\r\n    <input type='search' className='search'\r\n     placeholder={placeholder}\r\n     onChange={handleChange}/>\r\n);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './Components/card-list/card-list.component';\nimport { CardList } from './Components/card-list/card-list.component';\nimport { SearchBox} from './Components/SearchBox/searchbox.component';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state= {\n      string: 'hello Josh',\n      monsters:[],\n      searchField:''\n    };\n  }\ncomponentDidMount(){\n  fetch(\"https://jsonplaceholder.typicode.com/users\").\n  then(response=>response.json())\n  .then(users=>this.setState({monsters:users}))\n}\nhandleChange=e=>{\n  this.setState({searchField: e.target.value})\n}\n  render() {\n    const{monsters,searchField}=this.state;\n    const filtredMonsters=monsters.filter(monsters=>monsters.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder='search monsters' handleChange={this.handleChange}/>\n        <CardList monsters={filtredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}